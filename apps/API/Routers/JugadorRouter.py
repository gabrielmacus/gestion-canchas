from fastapi import APIRouter, Query, Path, status
from typing import List, Optional

from apps.API.Controllers.Jugador.JugadorFindHandler import JugadorFindHandler
from apps.API.Controllers.Jugador.JugadorGetByIdHandler import JugadorGetByIdHandler
from apps.API.Controllers.Jugador.JugadorCreateHandler import JugadorCreateHandler
from apps.API.Controllers.Jugador.JugadorUpdateHandler import JugadorUpdateHandler
from apps.API.Controllers.Jugador.JugadorDeleteHandler import JugadorDeleteHandler

# Importar modelos de documentaci√≥n
from apps.API.DTOs.SwaggerModels import (
    CrearJugadorRequest, EditarJugadorRequest, JugadorResponse, 
    JugadoresPaginatedResponse, ErrorResponse, ValidationErrorResponse
)

jugador_router = APIRouter(
    prefix="/jugadores", 
    tags=["üë§ Jugadores"],
    responses={
        400: {"model": ErrorResponse, "description": "Error de validaci√≥n o datos inv√°lidos"},
        404: {"model": ErrorResponse, "description": "Recurso no encontrado"},
        422: {"model": ValidationErrorResponse, "description": "Error de validaci√≥n de campos"},
        500: {"model": ErrorResponse, "description": "Error interno del servidor"}
    }
)

jugador_router.add_api_route(
    path="/",
    endpoint=JugadorFindHandler().find,
    methods=["GET"],
    summary="üîç Buscar y paginar jugadores",
    description="""
    Busca jugadores con filtros avanzados, ordenamiento y paginaci√≥n.

    ### Par√°metros de consulta disponibles:
    
    **Filtros (`filters[]`):**
    - `field`: nombre del campo (id, nombre, apellido, telefono, email)
    - `operator`: operador de comparaci√≥n (eq, neq, like, etc.)
    - `value`: valor a comparar
    
    **Ordenamiento (`orders[]`):**
    - `field`: campo por el que ordenar
    - `type`: asc (ascendente) o desc (descendente)
    
    **Paginaci√≥n:**
    - `p.page`: n√∫mero de p√°gina (por defecto: 1)
    - `p.size`: elementos por p√°gina (por defecto: 10)
    
    **Campos espec√≠ficos (`fields[]`):**
    - Lista de campos espec√≠ficos a incluir en la respuesta

    ### Ejemplos de uso:
    
    **Buscar por nombre:**
    ```
    GET /jugadores?filters[0][field]=nombre&filters[0][operator]=like&filters[0][value]=Carlos
    ```
    
    **Buscar por email:**
    ```
    GET /jugadores?filters[0][field]=email&filters[0][operator]=eq&filters[0][value]=carlos@email.com
    ```
    
    **Ordenar por apellido:**
    ```
    GET /jugadores?orders[0][field]=apellido&orders[0][type]=asc
    ```
    
    **Buscar jugadores sin email:**
    ```
    GET /jugadores?filters[0][field]=email&filters[0][operator]=eq&filters[0][value]=null
    ```
    """,
    response_model=JugadoresPaginatedResponse,
    status_code=status.HTTP_200_OK,
    responses={
        200: {
            "description": "Lista paginada de jugadores obtenida exitosamente",
            "content": {
                "application/json": {
                    "example": {
                        "data": [
                            {
                                "id": "550e8400-e29b-41d4-a716-446655440001",
                                "nombre": "Carlos",
                                "apellido": "Garc√≠a",
                                "telefono": "1234567890",
                                "email": "carlos.garcia@email.com"
                            },
                            {
                                "id": "550e8400-e29b-41d4-a716-446655440002",
                                "nombre": "Mar√≠a",
                                "apellido": "L√≥pez",
                                "telefono": "0987654321",
                                "email": None
                            }
                        ],
                        "pagination": {
                            "page": 1,
                            "size": 10,
                            "total": 15,
                            "total_pages": 2
                        }
                    }
                }
            }
        }
    }
)

jugador_router.add_api_route(
    path="/{id}",
    endpoint=JugadorGetByIdHandler().get_by_id,
    methods=["GET"],
    summary="üéØ Obtener jugador por ID",
    description="""
    Obtiene los detalles de un jugador espec√≠fico por su ID √∫nico.
    
    ### Par√°metros:
    - **id**: ID √∫nico del jugador (formato UUID)
    
    ### Respuesta:
    Retorna los datos completos del jugador si existe, incluyendo informaci√≥n de contacto.
    """,
    response_model=JugadorResponse,
    status_code=status.HTTP_200_OK,
    responses={
        200: {
            "description": "Jugador encontrado exitosamente",
            "content": {
                "application/json": {
                    "example": {
                        "id": "550e8400-e29b-41d4-a716-446655440001",
                        "nombre": "Carlos",
                        "apellido": "Garc√≠a",
                        "telefono": "1234567890",
                        "email": "carlos.garcia@email.com"
                    }
                }
            }
        },
        404: {
            "description": "Jugador no encontrado",
            "content": {
                "application/json": {
                    "example": {
                        "detail": "Jugador con ID '550e8400-e29b-41d4-a716-446655440001' no encontrado"
                    }
                }
            }
        }
    }
)

jugador_router.add_api_route(
    path="/",
    endpoint=JugadorCreateHandler().create,
    methods=["POST"],
    summary="‚ûï Crear nuevo jugador",
    description="""
    Crea un nuevo jugador en el sistema.
    
    ### Validaciones:
    - **ID**: Debe ser √∫nico en el sistema (formato UUID recomendado)
    - **Nombre**: Entre 3 y 100 caracteres, se eliminar√°n espacios extra
    - **Apellido**: Entre 3 y 100 caracteres, se eliminar√°n espacios extra
    - **Tel√©fono**: Solo d√≠gitos, entre 7 y 15 caracteres (requerido)
    - **Email**: Formato v√°lido (opcional, pero se requiere email O tel√©fono)
    
    ### Reglas de contacto:
    - Debe proporcionar al menos un tel√©fono O un email
    - Si se proporciona email, debe tener formato v√°lido
    - El tel√©fono es obligatorio si no se proporciona email
    
    ### Comportamiento:
    - Si el ID ya existe, retorna error 400
    - Los nombres se procesan eliminando espacios al inicio y final
    - El tel√©fono se valida que contenga solo d√≠gitos
    """,
    response_model=None,
    status_code=status.HTTP_201_CREATED,
    responses={
        201: {
            "description": "Jugador creado exitosamente",
            "content": {
                "application/json": {
                    "example": {"message": "Jugador creado exitosamente"}
                }
            }
        },
        400: {
            "description": "Error en los datos o ID duplicado",
            "content": {
                "application/json": {
                    "example": {
                        "detail": "Ya existe un jugador con el ID especificado"
                    }
                }
            }
        },
        422: {
            "description": "Error de validaci√≥n de campos",
            "content": {
                "application/json": {
                    "examples": {
                        "nombre_invalido": {
                            "summary": "Nombre inv√°lido",
                            "value": {
                                "detail": [
                                    {
                                        "loc": ["body", "nombre"],
                                        "msg": "El nombre del jugador debe tener entre 3 y 100 caracteres",
                                        "type": "value_error"
                                    }
                                ]
                            }
                        },
                        "telefono_invalido": {
                            "summary": "Tel√©fono inv√°lido",
                            "value": {
                                "detail": [
                                    {
                                        "loc": ["body", "telefono"],
                                        "msg": "El tel√©fono debe contener solo d√≠gitos",
                                        "type": "value_error"
                                    }
                                ]
                            }
                        },
                        "contacto_faltante": {
                            "summary": "Falta informaci√≥n de contacto",
                            "value": {
                                "detail": [
                                    {
                                        "loc": ["body"],
                                        "msg": "Debe proporcionar al menos un email o un tel√©fono",
                                        "type": "value_error"
                                    }
                                ]
                            }
                        }
                    }
                }
            }
        }
    }
)

jugador_router.add_api_route(
    path="/{id}",
    endpoint=JugadorUpdateHandler().update,
    methods=["PATCH"],
    summary="‚úèÔ∏è Actualizar jugador",
    description="""
    Actualiza parcialmente un jugador existente.
    
    ### Par√°metros:
    - **id**: ID √∫nico del jugador a actualizar
    
    ### Campos actualizables:
    - **nombre**: Nuevo nombre (3-100 caracteres)
    - **apellido**: Nuevo apellido (3-100 caracteres)
    - **telefono**: Nuevo tel√©fono (7-15 d√≠gitos)
    - **email**: Nuevo email (formato v√°lido)
    
    ### Comportamiento:
    - Solo se actualizan los campos proporcionados
    - Los campos no enviados mantienen su valor actual
    - Se aplican las mismas validaciones que en la creaci√≥n
    - Se mantiene la regla de contacto (email O tel√©fono requerido)
    """,
    response_model=None,
    status_code=status.HTTP_200_OK,
    responses={
        200: {
            "description": "Jugador actualizado exitosamente",
            "content": {
                "application/json": {
                    "example": {"message": "Jugador actualizado exitosamente"}
                }
            }
        },
        404: {
            "description": "Jugador no encontrado",
            "content": {
                "application/json": {
                    "example": {
                        "detail": "Jugador con ID '550e8400-e29b-41d4-a716-446655440001' no encontrado"
                    }
                }
            }
        }
    }
)

jugador_router.add_api_route(
    path="/{id}",
    endpoint=JugadorDeleteHandler().delete,
    methods=["DELETE"],
    summary="üóëÔ∏è Eliminar jugador",
    description="""
    Elimina un jugador del sistema.
    
    ### Par√°metros:
    - **id**: ID √∫nico del jugador a eliminar
    
    ### Comportamiento:
    - Elimina permanentemente el jugador del sistema
    - Si el jugador tiene reservas activas, puede fallar
    - La operaci√≥n no es reversible
    
    ### Nota importante:
    Aseg√∫rate de que no hay reservas activas antes de eliminar un jugador.
    Considera desactivar el jugador en lugar de eliminarlo si hay historial de reservas.
    """,
    response_model=None,
    status_code=status.HTTP_204_NO_CONTENT,
    responses={
        204: {
            "description": "Jugador eliminado exitosamente"
        },
        404: {
            "description": "Jugador no encontrado",
            "content": {
                "application/json": {
                    "example": {
                        "detail": "Jugador con ID '550e8400-e29b-41d4-a716-446655440001' no encontrado"
                    }
                }
            }
        },
        400: {
            "description": "No se puede eliminar (reservas activas u otras restricciones)",
            "content": {
                "application/json": {
                    "example": {
                        "detail": "No se puede eliminar el jugador porque tiene reservas activas"
                    }
                }
            }
        }
    }
)