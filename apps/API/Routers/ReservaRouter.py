from fastapi import APIRouter, Query, Path, status
from typing import List, Optional

from apps.API.Controllers.Reserva.ReservaFindHandler import ReservaFindHandler
from apps.API.Controllers.Reserva.ReservaGetByIdHandler import ReservaGetByIdHandler
from apps.API.Controllers.Reserva.ReservaCreateHandler import ReservaCreateHandler
from apps.API.Controllers.Reserva.ReservaUpdateHandler import ReservaUpdateHandler
from apps.API.Controllers.Reserva.ReservaDeleteHandler import ReservaDeleteHandler

# Importar modelos de documentaci√≥n
from apps.API.DTOs.SwaggerModels import (
    CrearReservaRequest, EditarReservaRequest, ReservaResponse, 
    ReservasPaginatedResponse, ErrorResponse, ValidationErrorResponse
)

reserva_router = APIRouter(
    prefix="/reservas", 
    tags=["üìÖ Reservas"],
    responses={
        400: {"model": ErrorResponse, "description": "Error de validaci√≥n o datos inv√°lidos"},
        404: {"model": ErrorResponse, "description": "Recurso no encontrado"},
        422: {"model": ValidationErrorResponse, "description": "Error de validaci√≥n de campos"},
        500: {"model": ErrorResponse, "description": "Error interno del servidor"}
    }
)

reserva_router.add_api_route(
    path="/",
    endpoint=ReservaFindHandler().find,
    methods=["GET"],
    summary="üîç Buscar y paginar reservas",
    description="""
    Busca reservas con filtros avanzados, ordenamiento y paginaci√≥n.

    ### Par√°metros de consulta disponibles:
    
    **Filtros (`filters[]`):**
    - `field`: nombre del campo (id, fecha_hora, duracion, cancha_id, jugador_id)
    - `operator`: operador de comparaci√≥n (eq, neq, gt, gte, lt, lte, like, etc.)
    - `value`: valor a comparar
    
    **Ordenamiento (`orders[]`):**
    - `field`: campo por el que ordenar
    - `type`: asc (ascendente) o desc (descendente)
    
    **Paginaci√≥n:**
    - `p.page`: n√∫mero de p√°gina (por defecto: 1)
    - `p.size`: elementos por p√°gina (por defecto: 10)
    
    **Campos espec√≠ficos (`fields[]`):**
    - Lista de campos espec√≠ficos a incluir en la respuesta

    ### Ejemplos de uso:
    
    **Buscar reservas de una cancha espec√≠fica:**
    ```
    GET /reservas?filters[0][field]=cancha_id&filters[0][operator]=eq&filters[0][value]=550e8400-e29b-41d4-a716-446655440000
    ```
    
    **Buscar reservas de un jugador:**
    ```
    GET /reservas?filters[0][field]=jugador_id&filters[0][operator]=eq&filters[0][value]=550e8400-e29b-41d4-a716-446655440001
    ```
    
    **Buscar reservas futuras:**
    ```
    GET /reservas?filters[0][field]=fecha_hora&filters[0][operator]=gt&filters[0][value]=2024-12-20T00:00:00
    ```
    
    **Buscar por duraci√≥n espec√≠fica:**
    ```
    GET /reservas?filters[0][field]=duracion&filters[0][operator]=eq&filters[0][value]=120
    ```
    
    **Ordenar por fecha m√°s reciente:**
    ```
    GET /reservas?orders[0][field]=fecha_hora&orders[0][type]=desc
    ```
    """,
    response_model=ReservasPaginatedResponse,
    status_code=status.HTTP_200_OK,
    responses={
        200: {
            "description": "Lista paginada de reservas obtenida exitosamente",
            "content": {
                "application/json": {
                    "example": {
                        "data": [
                            {
                                "id": "550e8400-e29b-41d4-a716-446655440002",
                                "fecha_hora": "2024-12-25T14:00:00",
                                "duracion": 120,
                                "cancha_id": "550e8400-e29b-41d4-a716-446655440000",
                                "jugador_id": "550e8400-e29b-41d4-a716-446655440001"
                            },
                            {
                                "id": "550e8400-e29b-41d4-a716-446655440003",
                                "fecha_hora": "2024-12-25T16:00:00",
                                "duracion": 60,
                                "cancha_id": "550e8400-e29b-41d4-a716-446655440001",
                                "jugador_id": "550e8400-e29b-41d4-a716-446655440002"
                            }
                        ],
                        "pagination": {
                            "page": 1,
                            "size": 10,
                            "total": 50,
                            "total_pages": 5
                        }
                    }
                }
            }
        }
    }
)

reserva_router.add_api_route(
    path="/{id}",
    endpoint=ReservaGetByIdHandler().get_by_id,
    methods=["GET"],
    summary="üéØ Obtener reserva por ID",
    description="""
    Obtiene los detalles de una reserva espec√≠fica por su ID √∫nico.
    
    ### Par√°metros:
    - **id**: ID √∫nico de la reserva (formato UUID)
    
    ### Respuesta:
    Retorna los datos completos de la reserva si existe, incluyendo:
    - Fecha y hora de la reserva
    - Duraci√≥n en minutos
    - IDs de la cancha y jugador asociados
    """,
    response_model=ReservaResponse,
    status_code=status.HTTP_200_OK,
    responses={
        200: {
            "description": "Reserva encontrada exitosamente",
            "content": {
                "application/json": {
                    "example": {
                        "id": "550e8400-e29b-41d4-a716-446655440002",
                        "fecha_hora": "2024-12-25T14:00:00",
                        "duracion": 120,
                        "cancha_id": "550e8400-e29b-41d4-a716-446655440000",
                        "jugador_id": "550e8400-e29b-41d4-a716-446655440001"
                    }
                }
            }
        },
        404: {
            "description": "Reserva no encontrada",
            "content": {
                "application/json": {
                    "example": {
                        "detail": "Reserva con ID '550e8400-e29b-41d4-a716-446655440002' no encontrada"
                    }
                }
            }
        }
    }
)

reserva_router.add_api_route(
    path="/",
    endpoint=ReservaCreateHandler().create,
    methods=["POST"],
    summary="‚ûï Crear nueva reserva",
    description="""
    Crea una nueva reserva en el sistema.
    
    ### Validaciones estrictas:
    
    **ID:**
    - Debe ser √∫nico en el sistema (formato UUID recomendado)
    
    **Fecha y hora:**
    - Debe ser mayor a la fecha/hora actual
    - No puede ser mayor a 3 meses desde ahora
    - Debe ser hora exacta (minutos y segundos deben ser 0)
    - Ejemplo v√°lido: "2024-12-25T14:00:00"
    
    **Duraci√≥n:**
    - Debe ser mayor a 0 minutos
    - Debe ser m√∫ltiplo de 60 minutos (solo horas completas)
    - M√≠nimo: 60 minutos (1 hora)
    - M√°ximo: 240 minutos (4 horas)
    - Valores v√°lidos: 60, 120, 180, 240
    
    **Cancha y Jugador:**
    - Los IDs deben existir en el sistema
    - La cancha debe estar disponible en el horario solicitado
    
    ### Reglas de negocio:
    - No se pueden superponer reservas en la misma cancha
    - Se valida disponibilidad antes de crear la reserva
    - Si la cancha ya est√° reservada, retorna error espec√≠fico
    """,
    response_model=None,
    status_code=status.HTTP_201_CREATED,
    responses={
        201: {
            "description": "Reserva creada exitosamente",
            "content": {
                "application/json": {
                    "example": {"message": "Reserva creada exitosamente"}
                }
            }
        },
        400: {
            "description": "Error en los datos, ID duplicado o cancha no disponible",
            "content": {
                "application/json": {
                    "examples": {
                        "id_duplicado": {
                            "summary": "ID ya existe",
                            "value": {
                                "detail": "Ya existe una reserva con el ID especificado"
                            }
                        },
                        "cancha_reservada": {
                            "summary": "Cancha no disponible",
                            "value": {
                                "detail": "La cancha ya est√° reservada en el horario solicitado"
                            }
                        },
                        "cancha_no_existe": {
                            "summary": "Cancha no existe",
                            "value": {
                                "detail": "La cancha especificada no existe"
                            }
                        },
                        "jugador_no_existe": {
                            "summary": "Jugador no existe",
                            "value": {
                                "detail": "El jugador especificado no existe"
                            }
                        }
                    }
                }
            }
        },
        422: {
            "description": "Error de validaci√≥n de campos",
            "content": {
                "application/json": {
                    "examples": {
                        "fecha_pasada": {
                            "summary": "Fecha en el pasado",
                            "value": {
                                "detail": [
                                    {
                                        "loc": ["body", "fecha_hora"],
                                        "msg": "La fecha de la reserva no puede ser menor a la fecha actual",
                                        "type": "value_error"
                                    }
                                ]
                            }
                        },
                        "hora_inexacta": {
                            "summary": "Hora no exacta",
                            "value": {
                                "detail": [
                                    {
                                        "loc": ["body", "fecha_hora"],
                                        "msg": "La hora de reserva debe ser exacta (minutos y segundos deben ser 0)",
                                        "type": "value_error"
                                    }
                                ]
                            }
                        },
                        "duracion_invalida": {
                            "summary": "Duraci√≥n inv√°lida",
                            "value": {
                                "detail": [
                                    {
                                        "loc": ["body", "duracion"],
                                        "msg": "La duraci√≥n de la reserva debe ser m√∫ltiplo de 60 minutos",
                                        "type": "value_error"
                                    }
                                ]
                            }
                        }
                    }
                }
            }
        }
    }
)

reserva_router.add_api_route(
    path="/{id}",
    endpoint=ReservaUpdateHandler().update,
    methods=["PATCH"],
    summary="‚úèÔ∏è Actualizar reserva",
    description="""
    Actualiza parcialmente una reserva existente.
    
    ### Par√°metros:
    - **id**: ID √∫nico de la reserva a actualizar
    
    ### Campos actualizables:
    - **fecha_hora**: Nueva fecha y hora (mismas validaciones que creaci√≥n)
    - **duracion**: Nueva duraci√≥n en minutos (m√∫ltiplo de 60, 60-240)
    - **cancha_id**: Nuevo ID de cancha (debe existir y estar disponible)
    - **jugador_id**: Nuevo ID de jugador (debe existir)
    
    ### Comportamiento:
    - Solo se actualizan los campos proporcionados
    - Los campos no enviados mantienen su valor actual
    - Se aplican las mismas validaciones que en la creaci√≥n
    - Se verifica disponibilidad de cancha si se cambia fecha/hora/cancha
    - No se pueden actualizar reservas del pasado
    
    ### Restricciones:
    - La reserva debe existir y no estar expirada
    - Si se cambia la cancha o fecha/hora, se valida disponibilidad
    - Se mantienen todas las reglas de negocio de creaci√≥n
    """,
    response_model=None,
    status_code=status.HTTP_200_OK,
    responses={
        200: {
            "description": "Reserva actualizada exitosamente",
            "content": {
                "application/json": {
                    "example": {"message": "Reserva actualizada exitosamente"}
                }
            }
        },
        404: {
            "description": "Reserva no encontrada",
            "content": {
                "application/json": {
                    "example": {
                        "detail": "Reserva con ID '550e8400-e29b-41d4-a716-446655440002' no encontrada"
                    }
                }
            }
        },
        400: {
            "description": "Error de validaci√≥n o conflicto de disponibilidad",
            "content": {
                "application/json": {
                    "examples": {
                        "reserva_expirada": {
                            "summary": "Reserva expirada",
                            "value": {
                                "detail": "No se puede actualizar una reserva expirada"
                            }
                        },
                        "conflicto_horario": {
                            "summary": "Conflicto de horario",
                            "value": {
                                "detail": "La cancha ya est√° reservada en el nuevo horario"
                            }
                        }
                    }
                }
            }
        }
    }
)

reserva_router.add_api_route(
    path="/{id}",
    endpoint=ReservaDeleteHandler().delete,
    methods=["DELETE"],
    summary="üóëÔ∏è Cancelar reserva",
    description="""
    Cancela (elimina) una reserva del sistema.
    
    ### Par√°metros:
    - **id**: ID √∫nico de la reserva a cancelar
    
    ### Comportamiento:
    - Elimina permanentemente la reserva del sistema
    - Libera el horario para nuevas reservas
    - La operaci√≥n no es reversible
    
    ### Restricciones:
    - La reserva debe existir
    - Dependiendo de las pol√≠ticas, puede haber restricciones de tiempo
    - Algunos sistemas permiten cancelaci√≥n solo con cierta antelaci√≥n
    
    ### Nota importante:
    Esta operaci√≥n libera inmediatamente el horario de la cancha.
    Considera implementar pol√≠ticas de cancelaci√≥n seg√∫n las reglas de negocio.
    """,
    response_model=None,
    status_code=status.HTTP_204_NO_CONTENT,
    responses={
        204: {
            "description": "Reserva cancelada exitosamente"
        },
        404: {
            "description": "Reserva no encontrada",
            "content": {
                "application/json": {
                    "example": {
                        "detail": "Reserva con ID '550e8400-e29b-41d4-a716-446655440002' no encontrada"
                    }
                }
            }
        },
        400: {
            "description": "No se puede cancelar (pol√≠ticas de cancelaci√≥n)",
            "content": {
                "application/json": {
                    "example": {
                        "detail": "No se puede cancelar la reserva con menos de 2 horas de antelaci√≥n"
                    }
                }
            }
        }
    }
) 